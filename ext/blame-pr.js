function blamePR() {

    function collectMainDiffLines() {
        var out = {};
        var files = document.getElementsByClassName('file');
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            var filename = file.getElementsByClassName('user-select-contain')[0].textContent.trim();
            var lines = file.getElementsByClassName('blob-code-inner');
            var section = '';
            for (var j = 0; j < lines.length; j++) {
                var line = lines[j];
                var text = line.textContent;
                if (text[0] === '@' && text[1] === '@') {
                    section = text;
                    continue;
                }
                if (text[0] !== '-' && text[0] !== '+') {
                    continue;
                }
                out[filename + section + text] = line;
            }
        }
        return out;
    }

    function getPatchFile(cb) {
        /*** XXX get from background page **/
        var x = "From 3be9f3f6a66522c1407c48f5112e315f02290bdb Mon Sep 17 00:00:00 2001\nFrom: Stephan Vock <stephan.vock@gmail.com>\nDate: Fri, 17 Jun 2016 12:01:36 +0200\nSubject: [PATCH 1\/4] Upgrade attempt to guzzl6 for async requests\n\n---\n src\/EasyBib\/Api\/Client\/ApiBuilder.php              |  19 +--\n src\/EasyBib\/Api\/Client\/ApiResource\/ApiResource.php |   6 +-\n ...\/Api\/Client\/ApiResource\/ResourceFactory.php     |  13 +-\n src\/EasyBib\/Api\/Client\/ApiTraverser.php            |  94 ++++++-------\n ...\/Api\/Client\/Validation\/ResponseValidator.php    | 151 ---------------------\n ...\/Validation\/ResponseValidatorMiddleware.php     | 125 +++++++++++++++++\n 6 files changed, 189 insertions(+), 219 deletions(-)\n delete mode 100644 src\/EasyBib\/Api\/Client\/Validation\/ResponseValidator.php\n create mode 100644 src\/EasyBib\/Api\/Client\/Validation\/ResponseValidatorMiddleware.php\n\ndiff --git a\/src\/EasyBib\/Api\/Client\/ApiBuilder.php b\/src\/EasyBib\/Api\/Client\/ApiBuilder.php\nindex fc65bd6..266e1a8 100644\n--- a\/src\/EasyBib\/Api\/Client\/ApiBuilder.php\n+++ b\/src\/EasyBib\/Api\/Client\/ApiBuilder.php\n@@ -2,6 +2,7 @@\n \n namespace EasyBib\\Api\\Client;\n \n+use EasyBib\\Guzzle\\BearerAuthMiddleware;\n use EasyBib\\OAuth2\\Client\\AbstractSession;\n use EasyBib\\OAuth2\\Client\\AuthorizationCodeGrant;\n use EasyBib\\OAuth2\\Client\\AuthorizationCodeGrant\\AuthorizationCodeSession;\n@@ -13,8 +14,8 @@\n use EasyBib\\OAuth2\\Client\\ServerConfig;\n use EasyBib\\OAuth2\\Client\\SimpleSession;\n use EasyBib\\OAuth2\\Client\\TokenStore;\n-use Guzzle\\Http\\Client;\n-use Guzzle\\Http\\ClientInterface;\n+use GuzzleHttp\\Client;\n+use GuzzleHttp\\ClientInterface;\n use Symfony\\Component\\HttpFoundation\\Session\\Session;\n \n \/**\n@@ -61,7 +62,7 @@ public function createWithAuthorizationCodeGrant(\n     ) {\n         $clientConfig = new AuthorizationCodeGrant\\ClientConfig([\n             'client_id' => $params['client_id'],\n-            'redirect_url' => $params['redirect_url'],\n+            'redirect_uri' => $params['redirect_uri'],\n         ]);\n \n         $serverConfig = new AuthorizationCodeGrant\\ServerConfig([\n@@ -156,7 +157,11 @@ private function buildApiTraverser(AbstractSession $oauthSession, $url)\n     {\n         $oauthSession->setTokenStore($this->getTokenStore());\n         $apiHttpClient = $this->getApiHttpClient($url);\n-        $oauthSession->addResourceClient($apiHttpClient);\n+\n+        $handler = $apiHttpClient->getConfig('handler');\n+        $handler->push(function ($callable) use ($oauthSession) {\n+            return new BearerAuthMiddleware($callable, $oauthSession);\n+        });\n \n         return new ApiTraverser($apiHttpClient);\n     }\n@@ -168,8 +173,7 @@ private function buildApiTraverser(AbstractSession $oauthSession, $url)\n     private function getOauthHttpClient($url)\n     {\n         \/\/ if none has been provided for testing, instantiate a blank Client()\n-        $oauthHttpClient = $this->oauthHttpClient ?: new Client();\n-        $oauthHttpClient->setBaseUrl($url);\n+        $oauthHttpClient = $this->oauthHttpClient ?: new Client(['base_uri' => $url]);\n \n         return $oauthHttpClient;\n     }\n@@ -181,8 +185,7 @@ private function getOauthHttpClient($url)\n     private function getApiHttpClient($url)\n     {\n         \/\/ if none has been provided for testing, instantiate a blank Client()\n-        $apiHttpClient = $this->apiHttpClient ?: new Client();\n-        $apiHttpClient->setBaseUrl($url);\n+        $apiHttpClient = $this->apiHttpClient ?: new Client(['base_uri' => $url]);\n \n         return $apiHttpClient;\n     }\ndiff --git a\/src\/EasyBib\/Api\/Client\/ApiResource\/ApiResource.php b\/src\/EasyBib\/Api\/Client\/ApiResource\/ApiResource.php\nindex 03fb722..f2aaf9c 100644\n--- a\/src\/EasyBib\/Api\/Client\/ApiResource\/ApiResource.php\n+++ b\/src\/EasyBib\/Api\/Client\/ApiResource\/ApiResource.php\n@@ -109,7 +109,7 @@ public function getRelationsContainer()\n \n     \/**\n      * @param string $rel\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function get($rel)\n     {\n@@ -119,7 +119,7 @@ public function get($rel)\n     \/**\n      * @param string $rel\n      * @param array $data\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function post($rel, array $data)\n     {\n@@ -129,7 +129,7 @@ public function post($rel, array $data)\n     \/**\n      * @param string $rel\n      * @param array $data\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function put($rel, array $data)\n     {\ndiff --git a\/src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php b\/src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php\nindex bf94bbd..d997b0b 100644\n--- a\/src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php\n+++ b\/src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php\n@@ -4,6 +4,7 @@\n \n use EasyBib\\Api\\Client\\ApiTraverser;\n use Guzzle\\Http\\Message\\Response;\n+use Psr\\Http\\Message\\ResponseInterface;\n \n class ResourceFactory\n {\n@@ -34,21 +35,21 @@ public function createFromData(\\stdClass $data)\n     }\n \n     \/**\n-     * @param Response $response\n+     * @param ResponseInterface $response\n      * @return Resource\n      *\/\n-    public function createFromResponse(Response $response)\n+    public function createFromResponse(ResponseInterface $response)\n     {\n-        $data = json_decode($response->getBody(true));\n-        $resource = $this->createFromData($data, $this->apiTraverser);\n+        $data = json_decode($response->getBody());\n+        $resource = $this->createFromData($data);\n \n         $locationHeaders = $response->getHeader('Location');\n         if ($locationHeaders) {\n-            $resource->setLocation($locationHeaders->toArray()[0]);\n+            $resource->setLocation($locationHeaders[0]);\n         }\n         $totalRowsHeaders = $response->getHeader('X-EasyBib-TotalRows');\n         if ($totalRowsHeaders && method_exists($resource, 'setTotalRows')) {\n-            $resource->setTotalRows($totalRowsHeaders->toArray()[0]);\n+            $resource->setTotalRows($totalRowsHeaders[0]);\n         }\n \n         return $resource;\ndiff --git a\/src\/EasyBib\/Api\/Client\/ApiTraverser.php b\/src\/EasyBib\/Api\/Client\/ApiTraverser.php\nindex 3a002c3..ed0994d 100644\n--- a\/src\/EasyBib\/Api\/Client\/ApiTraverser.php\n+++ b\/src\/EasyBib\/Api\/Client\/ApiTraverser.php\n@@ -4,14 +4,15 @@\n \n use Doctrine\\Common\\Cache\\ArrayCache;\n use Doctrine\\Common\\Cache\\CacheProvider;\n-use EasyBib\\Api\\Client\\ApiResource\\Collection;\n use EasyBib\\Api\\Client\\ApiResource\\ApiResource;\n+use EasyBib\\Api\\Client\\ApiResource\\Collection;\n use EasyBib\\Api\\Client\\ApiResource\\ResourceFactory;\n-use EasyBib\\Api\\Client\\Validation\\ResponseValidator;\n-use EasyBib\\Guzzle\\Plugin\\RequestHeader;\n-use Guzzle\\Http\\ClientInterface;\n-use Guzzle\\Http\\Message\\RequestInterface;\n-use Guzzle\\Http\\Message\\Response;\n+use EasyBib\\Api\\Client\\Validation\\ResponseValidatorMiddleware;\n+use GuzzleHttp\\ClientInterface;\n+use GuzzleHttp\\HandlerStack;\n+use GuzzleHttp\\Middleware;\n+use GuzzleHttp\\Psr7\\Uri;\n+use Psr\\Http\\Message\\RequestInterface;\n \n class ApiTraverser\n {\n@@ -36,37 +37,42 @@ class ApiTraverser\n     public function __construct(ClientInterface $httpClient)\n     {\n         $this->httpClient = $httpClient;\n-        $this->httpClient->setDefaultOption('exceptions', false);\n-        $this->httpClient->setDefaultOption('allow_redirects', false);\n-        $this->httpClient->addSubscriber(\n-            new RequestHeader('Accept', 'application\/vnd.com.easybib.data+json')\n-        );\n \n         $this->cache = new Cache(new ArrayCache());\n         $this->resourceFactory = new ResourceFactory($this);\n+\n+        \/** @var HandlerStack $handler *\/\n+        $handler = $httpClient->getConfig('handler');\n+        $handler->remove('http_errors');\n+        $handler->remove('allow_redirects');\n+        $handler->push(Middleware::mapRequest(function (RequestInterface $request) {\n+            return $request->withHeader('Accept', 'application\/vnd.com.easybib.data+json');\n+        }));\n+        $handler->push(Middleware::mapResponse(new ResponseValidatorMiddleware()));\n     }\n \n     \/**\n-     * @param string $url\n+     * @param string|Uri $url\n      * @param array $queryParams\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function get($url, array $queryParams = null)\n     {\n         return $this->cache->cacheAndReturn(function () use ($url, $queryParams) {\n-            $request = $this->httpClient->get($url);\n+            $uri = new Uri($url);\n             if (null !== $queryParams) {\n-                $request->getQuery()->replace($queryParams);\n+                $uri = $uri->withQuery(http_build_query($queryParams));\n             }\n+            $response = $this->httpClient->request('GET', $uri);\n \n-            return $this->resourceFactory->createFromResponse($this->send($request));\n+            return $this->resourceFactory->createFromResponse($response);\n         }, new CacheKey([$url, $queryParams]));\n     }\n \n     \/**\n-     * @param string $url\n+     * @param string|Uri $url\n      * @param array $resource\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function post($url, array $resource)\n     {\n@@ -75,9 +81,9 @@ public function post($url, array $resource)\n     }\n \n     \/**\n-     * @param string $url\n+     * @param string|Uri $url\n      * @param array $resource\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function put($url, array $resource)\n     {\n@@ -86,9 +92,9 @@ public function put($url, array $resource)\n     }\n \n     \/**\n-     * @param $url\n+     * @param string|Uri $url\n      * @param array $resource\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function patch($url, array $resource)\n     {\n@@ -97,15 +103,15 @@ public function patch($url, array $resource)\n     }\n \n     \/**\n-     * @param $url\n-     * @return Resource\n+     * @param string|Uri $url\n+     * @return ApiResource\n      *\/\n     public function delete($url)\n     {\n         $this->cache->clear();\n-        $request = $this->httpClient->delete($url);\n+        $response = $this->httpClient->request('delete', $url);\n \n-        return $this->resourceFactory->createFromResponse($this->send($request));\n+        return $this->resourceFactory->createFromResponse($response);\n     }\n \n     \/**\n@@ -121,7 +127,7 @@ public function getSubjects(array $queryParams = [])\n \n     \/**\n      * @param string $subjectId\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function getSubject($subjectId)\n     {\n@@ -131,7 +137,7 @@ public function getSubject($subjectId)\n     \/**\n      * This bootstraps the session by returning the user's \"root\" Resource\n      *\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function getUser()\n     {\n@@ -151,7 +157,7 @@ public function getProjects(array $queryParams = [])\n \n     \/**\n      * @param string $projectId\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function getProject($projectId)\n     {\n@@ -160,7 +166,7 @@ public function getProject($projectId)\n \n     \/**\n      * @param array $projectData\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     public function postProject(array $projectData)\n     {\n@@ -174,7 +180,7 @@ public function postProject(array $projectData)\n     public function postToBulkResolver(array $links)\n     {\n         $payload = ['links' => $links];\n-        return $this->post($this->httpClient->getBaseUrl() . '\/resolve', $payload);\n+        return $this->post($this->httpClient->getConfig('base_uri') . '\/resolve', $payload);\n     }\n \n     \/**\n@@ -182,7 +188,7 @@ public function postToBulkResolver(array $links)\n      *\/\n     public function getUserBaseUrl()\n     {\n-        return $this->httpClient->getBaseUrl() . '\/user\/';\n+        return $this->httpClient->getConfig('base_uri') . '\/user\/';\n     }\n \n     \/**\n@@ -190,7 +196,7 @@ public function getUserBaseUrl()\n      *\/\n     public function getProjectsBaseUrl()\n     {\n-        return $this->httpClient->getBaseUrl() . '\/projects\/';\n+        return $this->httpClient->getConfig('base_uri') . '\/projects\/';\n     }\n \n     \/**\n@@ -198,7 +204,7 @@ public function getProjectsBaseUrl()\n      *\/\n     public function getSubjectsBaseUrl()\n     {\n-        return $this->httpClient->getBaseUrl() . '\/subjects\/';\n+        return $this->httpClient->getConfig('base_uri') . '\/subjects\/';\n     }\n \n     \/**\n@@ -210,30 +216,16 @@ public function setCache(CacheProvider $cacheProvider)\n     }\n \n     \/**\n-     * @param RequestInterface $request\n-     * @return Response\n-     *\/\n-    private function send(RequestInterface $request)\n-    {\n-        $response = $request->send();\n-\n-        $validator = new ResponseValidator($response);\n-        $validator->validate();\n-\n-        return $response;\n-    }\n-\n-    \/**\n      * @param string $method\n      * @param string $url\n      * @param array $resource\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     private function sendResource($method, $url, array $resource)\n     {\n         $payload = json_encode($resource);\n-        $request = $this->httpClient->$method($url, [], $payload);\n+        $response = $this->httpClient->request($method, $url, ['body' => $payload]);\n \n-        return $this->resourceFactory->createFromResponse($this->send($request));\n+        return $this->resourceFactory->createFromResponse($response);\n     }\n }\ndiff --git a\/src\/EasyBib\/Api\/Client\/Validation\/ResponseValidator.php b\/src\/EasyBib\/Api\/Client\/Validation\/ResponseValidator.php\ndeleted file mode 100644\nindex f16b584..0000000\n--- a\/src\/EasyBib\/Api\/Client\/Validation\/ResponseValidator.php\n+++ \/dev\/null\n@@ -1,151 +0,0 @@\n-<?php\n-\n-namespace EasyBib\\Api\\Client\\Validation;\n-\n-use Guzzle\\Http\\Message\\Response;\n-\n-class ResponseValidator\n-{\n-    \/**\n-     * @var Response\n-     *\/\n-    private $response;\n-\n-    \/**\n-     * @var array\n-     *\/\n-    private $payload;\n-\n-    \/**\n-     * @param Response $response\n-     *\/\n-    public function __construct(Response $response)\n-    {\n-        $this->response = $response;\n-    }\n-\n-    public function validate()\n-    {\n-        $this->checkInfrastructureError();\n-        $this->checkInvalidJson();\n-        $this->checkTokenExpiration();\n-        $this->checkUnauthorized();\n-        $this->checkNotFoundError();\n-        $this->checkApiError();\n-        $this->checkMiscError();\n-    }\n-\n-    \/**\n-     * @throws InvalidJsonException\n-     *\/\n-    private function checkInvalidJson()\n-    {\n-        $body = $this->response->getBody(true);\n-        json_decode($body, true);\n-\n-        if (json_last_error() != JSON_ERROR_NONE) {\n-            $message = sprintf('Invalid JSON: \"%s\"', $body);\n-            throw new InvalidJsonException($message);\n-        }\n-    }\n-\n-    \/**\n-     * @throws UnauthorizedActionException\n-     *\/\n-    private function checkUnauthorized()\n-    {\n-        if ($this->response->getStatusCode() == 403) {\n-            throw new UnauthorizedActionException($this->getPayload()['msg']);\n-        }\n-    }\n-\n-    \/**\n-     * @throws ExpiredTokenException\n-     *\/\n-    private function checkTokenExpiration()\n-    {\n-        $payload = $this->getPayload();\n-\n-        if (empty($payload['error'])) {\n-            return;\n-        }\n-\n-        if ($payload['error'] == 'invalid_grant') {\n-            throw new ExpiredTokenException();\n-        }\n-    }\n-\n-    \/**\n-     * @throws ResourceNotFoundException\n-     *\/\n-    private function checkNotFoundError()\n-    {\n-        $payload = $this->getPayload();\n-\n-        if (isset($payload['msg']) && $payload['msg'] == 'Not Found') {\n-            throw new ResourceNotFoundException(\n-                $payload['msg'],\n-                $this->response->getStatusCode()\n-            );\n-        }\n-    }\n-\n-    \/**\n-     * @throws ApiErrorException\n-     *\/\n-    private function checkApiError()\n-    {\n-        $payload = $this->getPayload();\n-\n-        if (isset($payload['error']) && isset($payload['error_description'])) {\n-            throw new ApiErrorException(\n-                $payload['error_description'],\n-                $this->response->getStatusCode()\n-            );\n-        }\n-\n-        if (isset($payload['msg'])) {\n-            throw new ApiErrorException(\n-                $payload['msg'],\n-                $this->response->getStatusCode()\n-            );\n-        }\n-    }\n-\n-    \/**\n-     * @throws InfrastructureErrorException\n-     *\/\n-    private function checkInfrastructureError()\n-    {\n-        $statusCode = $this->response->getStatusCode();\n-\n-        if (in_array($statusCode, [502, 503, 504])) {\n-            throw new InfrastructureErrorException($statusCode);\n-        }\n-    }\n-\n-    \/**\n-     * @throws ApiException\n-     *\/\n-    private function checkMiscError()\n-    {\n-        if ($this->response->isError()) {\n-            $message = sprintf('Could not complete request: %s', var_export($this->getPayload(), true));\n-            throw new ApiException($message, 500);\n-        }\n-    }\n-\n-    \/**\n-     * @return array\n-     *\/\n-    private function getPayload()\n-    {\n-        if ($this->payload) {\n-            return $this->payload;\n-        }\n-\n-        $body = $this->response->getBody(true);\n-\n-        return $this->payload = json_decode($body, true);\n-    }\n-}\ndiff --git a\/src\/EasyBib\/Api\/Client\/Validation\/ResponseValidatorMiddleware.php b\/src\/EasyBib\/Api\/Client\/Validation\/ResponseValidatorMiddleware.php\nnew file mode 100644\nindex 0000000..b2961c0\n--- \/dev\/null\n+++ b\/src\/EasyBib\/Api\/Client\/Validation\/ResponseValidatorMiddleware.php\n@@ -0,0 +1,125 @@\n+<?php\n+\n+namespace EasyBib\\Api\\Client\\Validation;\n+\n+use Psr\\Http\\Message\\ResponseInterface;\n+\n+class ResponseValidatorMiddleware\n+{\n+    \/**\n+     * @var mixed[]\n+     *\/\n+    private $payload;\n+\n+    public function __invoke(ResponseInterface $response)\n+    {\n+        $this->payload = json_decode($response->getBody(), true);\n+\n+        $this->checkInfrastructureError($response);\n+        $this->checkInvalidJson($response);\n+        $this->checkTokenExpiration();\n+        $this->checkUnauthorized($response);\n+        $this->checkNotFoundError($response);\n+        $this->checkApiError($response);\n+        $this->checkMiscError($response);\n+\n+        return $response;\n+    }\n+\n+    \/**\n+     * @param ResponseInterface $response\n+     * @throws InvalidJsonException\n+     *\/\n+    private function checkInvalidJson(ResponseInterface $response)\n+    {\n+        if (json_last_error() != JSON_ERROR_NONE) {\n+            $message = sprintf('Invalid JSON: \"%s\"', $response->getBody());\n+            throw new InvalidJsonException($message);\n+        }\n+    }\n+\n+    \/**\n+     * @param ResponseInterface $response\n+     * @throws UnauthorizedActionException\n+     *\/\n+    private function checkUnauthorized(ResponseInterface $response)\n+    {\n+        if ($response->getStatusCode() == 403) {\n+            throw new UnauthorizedActionException($this->payload['msg']);\n+        }\n+    }\n+\n+    \/**\n+     * @throws ExpiredTokenException\n+     *\/\n+    private function checkTokenExpiration()\n+    {\n+        if (empty($this->payload['error'])) {\n+            return;\n+        }\n+\n+        if ($this->payload['error'] == 'invalid_grant') {\n+            throw new ExpiredTokenException();\n+        }\n+    }\n+\n+    \/**\n+     * @param ResponseInterface $response\n+     * @throws ResourceNotFoundException\n+     *\/\n+    private function checkNotFoundError(ResponseInterface $response)\n+    {\n+        if (isset($this->payload['msg']) && $this->payload['msg'] == 'Not Found') {\n+            throw new ResourceNotFoundException(\n+                $this->payload['msg'],\n+                $response->getStatusCode()\n+            );\n+        }\n+    }\n+\n+    \/**\n+     * @param ResponseInterface $response\n+     * @throws ApiErrorException\n+     *\/\n+    private function checkApiError(ResponseInterface $response)\n+    {\n+        if (isset($this->payload['error']) && isset($this->payload['error_description'])) {\n+            throw new ApiErrorException(\n+                $this->payload['error_description'],\n+                $response->getStatusCode()\n+            );\n+        }\n+\n+        if (isset($this->payload['msg'])) {\n+            throw new ApiErrorException(\n+                $this->payload['msg'],\n+                $response->getStatusCode()\n+            );\n+        }\n+    }\n+\n+    \/**\n+     * @param ResponseInterface $response\n+     * @throws InfrastructureErrorException\n+     *\/\n+    private function checkInfrastructureError(ResponseInterface $response)\n+    {\n+        $statusCode = $response->getStatusCode();\n+\n+        if (in_array($statusCode, [502, 503, 504])) {\n+            throw new InfrastructureErrorException($statusCode);\n+        }\n+    }\n+\n+    \/**\n+     * @param ResponseInterface $response\n+     * @throws ApiErrorException\n+     *\/\n+    private function checkMiscError(ResponseInterface $response)\n+    {\n+        if ($response->getStatusCode() >= 400) {\n+            $message = sprintf('Could not complete request: %s', var_export($this->payload, true));\n+            throw new ApiException($message, 500);\n+        }\n+    }\n+}\n\nFrom 80be56a672568378ad0445df69b500be23a50577 Mon Sep 17 00:00:00 2001\nFrom: Stephan Vock <stephan.vock@gmail.com>\nDate: Wed, 22 Jun 2016 14:45:07 +0200\nSubject: [PATCH 2\/4] Composer: require newer guzzle and oauth-client library\n\n---\n composer.json |  17 +-\n composer.lock | 535 +++++++++++++++++++++++++++++++++++++++++++++-------------\n 2 files changed, 423 insertions(+), 129 deletions(-)\n\ndiff --git a\/composer.json b\/composer.json\nindex b125d94..49f5241 100644\n--- a\/composer.json\n+++ b\/composer.json\n@@ -11,18 +11,14 @@\n     \"repositories\": [\n         {\n             \"type\": \"vcs\",\n-            \"url\": \"git@github.com:fabpot\/PHP-CS-Fixer.git\"\n-        },\n-        {\n-            \"type\": \"vcs\",\n             \"url\": \"git@github.com:easybiblabs\/oauth2-client-php.git\"\n         }\n     ],\n     \"require\": {\n         \"php\": \">=5.5\",\n-        \"easybiblabs\/oauth2-client-php\": \">=0.3.1\",\n         \"doctrine\/cache\": \"~1.3\",\n-        \"guzzle\/guzzle\": \"3.8.*\"\n+        \"easybiblabs\/oauth2-client-php\": \"^3.0.0\",\n+        \"guzzlehttp\/guzzle\": \"^6.0\"\n     },\n     \"require-dev\": {\n       \"phpunit\/phpunit\": \">=3.7\",\n@@ -35,8 +31,13 @@\n     \"autoload\": {\n         \"psr-0\": {\n             \"EasyBib\\\\Api\\\\Client\\\\\": \"src\/\",\n-            \"EasyBib\\\\Guzzle\\\\\": \"src\/\",\n-            \"EasyBib\\\\Tests\\\\Api\\\\Client\\\\\": \"tests\/\"\n+            \"EasyBib\\\\Guzzle\\\\\": \"src\/\"\n+        }\n+    },\n+    \"autoload-dev\": {\n+        \"psr-0\": {\n+            \"EasyBib\\\\Tests\\\\Api\\\\Client\\\\\": \"tests\/\",\n+            \"EasyBib\\\\Tests\\\\Mocks\\\\\": \"tests\/\"\n         },\n         \"classmap\": [\"tests\/\"]\n     }\ndiff --git a\/composer.lock b\/composer.lock\nindex beb5e2e..a1d8815 100644\n--- a\/composer.lock\n+++ b\/composer.lock\n@@ -4,8 +4,8 @@\n         \"Read more about it at https:\/\/getcomposer.org\/doc\/01-basic-usage.md#composer-lock-the-lock-file\",\n         \"This file is @generated automatically\"\n     ],\n-    \"hash\": \"11cdc8f4e7f7bc12ef30991cff82601c\",\n-    \"content-hash\": \"a61b449b63d43f96a459a7d42e4fce59\",\n+    \"hash\": \"ac1dd7aad3fb1651101a76385cd5bf06\",\n+    \"content-hash\": \"46894392a480f66a92ca510d278b8256\",\n     \"packages\": [\n         {\n             \"name\": \"doctrine\/cache\",\n@@ -83,43 +83,46 @@\n         },\n         {\n             \"name\": \"easybiblabs\/oauth2-client-php\",\n-            \"version\": \"0.3.1\",\n+            \"version\": \"3.0.0\",\n             \"source\": {\n                 \"type\": \"git\",\n                 \"url\": \"https:\/\/github.com\/easybiblabs\/oauth2-client-php.git\",\n-                \"reference\": \"e453b2bdc5b6c3b7d4b770193d7f898a197b54ac\"\n+                \"reference\": \"84ea3ea4caf4aa77ebedddef8f09d0a54dc019cd\"\n             },\n             \"dist\": {\n                 \"type\": \"zip\",\n-                \"url\": \"https:\/\/api.github.com\/repos\/easybiblabs\/oauth2-client-php\/zipball\/e453b2bdc5b6c3b7d4b770193d7f898a197b54ac\",\n-                \"reference\": \"e453b2bdc5b6c3b7d4b770193d7f898a197b54ac\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/easybiblabs\/oauth2-client-php\/zipball\/84ea3ea4caf4aa77ebedddef8f09d0a54dc019cd\",\n+                \"reference\": \"84ea3ea4caf4aa77ebedddef8f09d0a54dc019cd\",\n                 \"shasum\": \"\"\n             },\n             \"require\": {\n-                \"firebase\/php-jwt\": \"dev-master\",\n-                \"guzzle\/guzzle\": \"3.8.*\",\n-                \"php\": \">=5.4\",\n-                \"symfony\/http-foundation\": \">=2.3.0\"\n+                \"firebase\/php-jwt\": \"^3.0.0\",\n+                \"guzzlehttp\/guzzle\": \"^6.0\",\n+                \"php\": \">=5.5\",\n+                \"symfony\/http-foundation\": \"2.*\"\n             },\n             \"require-dev\": {\n-                \"fabpot\/php-cs-fixer\": \"dev-master\",\n-                \"phpmd\/phpmd\": \"*\",\n-                \"phpunit\/phpunit\": \">=3.7\",\n-                \"squizlabs\/php_codesniffer\": \"1.*\"\n+                \"phpmd\/phpmd\": \"^2.2.3\",\n+                \"phpunit\/phpunit\": \"4.8.*\",\n+                \"squizlabs\/php_codesniffer\": \"^2.3.3\"\n             },\n             \"type\": \"library\",\n             \"autoload\": {\n                 \"psr-0\": {\n                     \"EasyBib\\\\Guzzle\\\\\": \"src\/\",\n-                    \"EasyBib\\\\OAuth2\\\\Client\\\\\": \"src\/\",\n-                    \"EasyBib\\\\Tests\\\\OAuth2\\\\Client\\\\\": \"tests\/\"\n-                },\n+                    \"EasyBib\\\\OAuth2\\\\Client\\\\\": \"src\/\"\n+                }\n+            },\n+            \"autoload-dev\": {\n                 \"classmap\": [\n                     \"tests\/\"\n-                ]\n+                ],\n+                \"psr-0\": {\n+                    \"EasyBib\\\\Tests\\\\OAuth2\\\\Client\\\\\": \"tests\/\"\n+                }\n             },\n             \"license\": [\n-                \"BSD-2-Clause\"\n+                \"Apache-2.0\"\n             ],\n             \"authors\": [\n                 {\n@@ -129,34 +132,33 @@\n             ],\n             \"description\": \"OAuth2 client for PHP\",\n             \"support\": {\n-                \"source\": \"https:\/\/github.com\/easybiblabs\/oauth2-client-php\/tree\/0.3.1\",\n+                \"source\": \"https:\/\/github.com\/easybiblabs\/oauth2-client-php\/tree\/3.0.0\",\n                 \"issues\": \"https:\/\/github.com\/easybiblabs\/oauth2-client-php\/issues\"\n             },\n-            \"time\": \"2014-03-03 14:53:39\"\n+            \"time\": \"2016-06-22 11:14:11\"\n         },\n         {\n             \"name\": \"firebase\/php-jwt\",\n-            \"version\": \"dev-master\",\n-            \"target-dir\": \"Firebase\/PHP-JWT\",\n+            \"version\": \"v3.0.0\",\n             \"source\": {\n                 \"type\": \"git\",\n                 \"url\": \"https:\/\/github.com\/firebase\/php-jwt.git\",\n-                \"reference\": \"53669d621149e49c2a428722a62acfef3342c260\"\n+                \"reference\": \"fa8a06e96526eb7c0eeaa47e4f39be59d21f16e1\"\n             },\n             \"dist\": {\n                 \"type\": \"zip\",\n-                \"url\": \"https:\/\/api.github.com\/repos\/firebase\/php-jwt\/zipball\/53669d621149e49c2a428722a62acfef3342c260\",\n-                \"reference\": \"53669d621149e49c2a428722a62acfef3342c260\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/firebase\/php-jwt\/zipball\/fa8a06e96526eb7c0eeaa47e4f39be59d21f16e1\",\n+                \"reference\": \"fa8a06e96526eb7c0eeaa47e4f39be59d21f16e1\",\n                 \"shasum\": \"\"\n             },\n             \"require\": {\n-                \"php\": \">=5.2.0\"\n+                \"php\": \">=5.3.0\"\n             },\n             \"type\": \"library\",\n             \"autoload\": {\n-                \"classmap\": [\n-                    \"Authentication\/\"\n-                ]\n+                \"psr-4\": {\n+                    \"Firebase\\\\JWT\\\\\": \"src\"\n+                }\n             },\n             \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n             \"license\": [\n@@ -176,70 +178,44 @@\n             ],\n             \"description\": \"A simple library to encode and decode JSON Web Tokens (JWT) in PHP. Should conform to the current spec.\",\n             \"homepage\": \"https:\/\/github.com\/firebase\/php-jwt\",\n-            \"time\": \"2013-09-03 20:55:18\"\n+            \"time\": \"2015-07-22 18:31:08\"\n         },\n         {\n-            \"name\": \"guzzle\/guzzle\",\n-            \"version\": \"v3.8.1\",\n+            \"name\": \"guzzlehttp\/guzzle\",\n+            \"version\": \"6.2.0\",\n             \"source\": {\n                 \"type\": \"git\",\n                 \"url\": \"https:\/\/github.com\/guzzle\/guzzle.git\",\n-                \"reference\": \"4de0618a01b34aa1c8c33a3f13f396dcd3882eba\"\n+                \"reference\": \"d094e337976dff9d8e2424e8485872194e768662\"\n             },\n             \"dist\": {\n                 \"type\": \"zip\",\n-                \"url\": \"https:\/\/api.github.com\/repos\/guzzle\/guzzle\/zipball\/4de0618a01b34aa1c8c33a3f13f396dcd3882eba\",\n-                \"reference\": \"4de0618a01b34aa1c8c33a3f13f396dcd3882eba\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/guzzle\/guzzle\/zipball\/d094e337976dff9d8e2424e8485872194e768662\",\n+                \"reference\": \"d094e337976dff9d8e2424e8485872194e768662\",\n                 \"shasum\": \"\"\n             },\n             \"require\": {\n-                \"ext-curl\": \"*\",\n-                \"php\": \">=5.3.3\",\n-                \"symfony\/event-dispatcher\": \">=2.1\"\n-            },\n-            \"replace\": {\n-                \"guzzle\/batch\": \"self.version\",\n-                \"guzzle\/cache\": \"self.version\",\n-                \"guzzle\/common\": \"self.version\",\n-                \"guzzle\/http\": \"self.version\",\n-                \"guzzle\/inflection\": \"self.version\",\n-                \"guzzle\/iterator\": \"self.version\",\n-                \"guzzle\/log\": \"self.version\",\n-                \"guzzle\/parser\": \"self.version\",\n-                \"guzzle\/plugin\": \"self.version\",\n-                \"guzzle\/plugin-async\": \"self.version\",\n-                \"guzzle\/plugin-backoff\": \"self.version\",\n-                \"guzzle\/plugin-cache\": \"self.version\",\n-                \"guzzle\/plugin-cookie\": \"self.version\",\n-                \"guzzle\/plugin-curlauth\": \"self.version\",\n-                \"guzzle\/plugin-error-response\": \"self.version\",\n-                \"guzzle\/plugin-history\": \"self.version\",\n-                \"guzzle\/plugin-log\": \"self.version\",\n-                \"guzzle\/plugin-md5\": \"self.version\",\n-                \"guzzle\/plugin-mock\": \"self.version\",\n-                \"guzzle\/plugin-oauth\": \"self.version\",\n-                \"guzzle\/service\": \"self.version\",\n-                \"guzzle\/stream\": \"self.version\"\n+                \"guzzlehttp\/promises\": \"~1.0\",\n+                \"guzzlehttp\/psr7\": \"~1.1\",\n+                \"php\": \">=5.5.0\"\n             },\n             \"require-dev\": {\n-                \"doctrine\/cache\": \"*\",\n-                \"monolog\/monolog\": \"1.*\",\n-                \"phpunit\/phpunit\": \"3.7.*\",\n-                \"psr\/log\": \"1.0.*\",\n-                \"symfony\/class-loader\": \"*\",\n-                \"zendframework\/zend-cache\": \"<2.3\",\n-                \"zendframework\/zend-log\": \"<2.3\"\n+                \"ext-curl\": \"*\",\n+                \"phpunit\/phpunit\": \"~4.0\",\n+                \"psr\/log\": \"~1.0\"\n             },\n             \"type\": \"library\",\n             \"extra\": {\n                 \"branch-alias\": {\n-                    \"dev-master\": \"3.8-dev\"\n+                    \"dev-master\": \"6.2-dev\"\n                 }\n             },\n             \"autoload\": {\n-                \"psr-0\": {\n-                    \"Guzzle\": \"src\/\",\n-                    \"Guzzle\\\\Tests\": \"tests\/\"\n+                \"files\": [\n+                    \"src\/functions_include.php\"\n+                ],\n+                \"psr-4\": {\n+                    \"GuzzleHttp\\\\\": \"src\/\"\n                 }\n             },\n             \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n@@ -251,13 +227,9 @@\n                     \"name\": \"Michael Dowling\",\n                     \"email\": \"mtdowling@gmail.com\",\n                     \"homepage\": \"https:\/\/github.com\/mtdowling\"\n-                },\n-                {\n-                    \"name\": \"Guzzle Community\",\n-                    \"homepage\": \"https:\/\/github.com\/guzzle\/guzzle\/contributors\"\n                 }\n             ],\n-            \"description\": \"Guzzle is a PHP HTTP client library and framework for building RESTful web service clients\",\n+            \"description\": \"Guzzle is a PHP HTTP client library\",\n             \"homepage\": \"http:\/\/guzzlephp.org\/\",\n             \"keywords\": [\n                 \"client\",\n@@ -268,43 +240,139 @@\n                 \"rest\",\n                 \"web service\"\n             ],\n-            \"time\": \"2014-01-28 22:29:15\"\n+            \"time\": \"2016-03-21 20:02:09\"\n         },\n         {\n-            \"name\": \"symfony\/event-dispatcher\",\n-            \"version\": \"v2.4.2\",\n-            \"target-dir\": \"Symfony\/Component\/EventDispatcher\",\n+            \"name\": \"guzzlehttp\/promises\",\n+            \"version\": \"1.2.0\",\n             \"source\": {\n                 \"type\": \"git\",\n-                \"url\": \"https:\/\/github.com\/symfony\/event-dispatcher.git\",\n-                \"reference\": \"4708b8cd41984a5ba29fe7dd40716f7f761ac501\"\n+                \"url\": \"https:\/\/github.com\/guzzle\/promises.git\",\n+                \"reference\": \"c10d860e2a9595f8883527fa0021c7da9e65f579\"\n             },\n             \"dist\": {\n                 \"type\": \"zip\",\n-                \"url\": \"https:\/\/api.github.com\/repos\/symfony\/event-dispatcher\/zipball\/4708b8cd41984a5ba29fe7dd40716f7f761ac501\",\n-                \"reference\": \"4708b8cd41984a5ba29fe7dd40716f7f761ac501\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/guzzle\/promises\/zipball\/c10d860e2a9595f8883527fa0021c7da9e65f579\",\n+                \"reference\": \"c10d860e2a9595f8883527fa0021c7da9e65f579\",\n                 \"shasum\": \"\"\n             },\n             \"require\": {\n-                \"php\": \">=5.3.3\"\n+                \"php\": \">=5.5.0\"\n             },\n             \"require-dev\": {\n-                \"symfony\/dependency-injection\": \"~2.0\"\n+                \"phpunit\/phpunit\": \"~4.0\"\n             },\n-            \"suggest\": {\n-                \"symfony\/dependency-injection\": \"\",\n-                \"symfony\/http-kernel\": \"\"\n+            \"type\": \"library\",\n+            \"extra\": {\n+                \"branch-alias\": {\n+                    \"dev-master\": \"1.0-dev\"\n+                }\n+            },\n+            \"autoload\": {\n+                \"psr-4\": {\n+                    \"GuzzleHttp\\\\Promise\\\\\": \"src\/\"\n+                },\n+                \"files\": [\n+                    \"src\/functions_include.php\"\n+                ]\n+            },\n+            \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n+            \"license\": [\n+                \"MIT\"\n+            ],\n+            \"authors\": [\n+                {\n+                    \"name\": \"Michael Dowling\",\n+                    \"email\": \"mtdowling@gmail.com\",\n+                    \"homepage\": \"https:\/\/github.com\/mtdowling\"\n+                }\n+            ],\n+            \"description\": \"Guzzle promises library\",\n+            \"keywords\": [\n+                \"promise\"\n+            ],\n+            \"time\": \"2016-05-18 16:56:05\"\n+        },\n+        {\n+            \"name\": \"guzzlehttp\/psr7\",\n+            \"version\": \"1.3.0\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https:\/\/github.com\/guzzle\/psr7.git\",\n+                \"reference\": \"31382fef2889136415751badebbd1cb022a4ed72\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/guzzle\/psr7\/zipball\/31382fef2889136415751badebbd1cb022a4ed72\",\n+                \"reference\": \"31382fef2889136415751badebbd1cb022a4ed72\",\n+                \"shasum\": \"\"\n+            },\n+            \"require\": {\n+                \"php\": \">=5.4.0\",\n+                \"psr\/http-message\": \"~1.0\"\n+            },\n+            \"provide\": {\n+                \"psr\/http-message-implementation\": \"1.0\"\n+            },\n+            \"require-dev\": {\n+                \"phpunit\/phpunit\": \"~4.0\"\n             },\n             \"type\": \"library\",\n             \"extra\": {\n                 \"branch-alias\": {\n-                    \"dev-master\": \"2.4-dev\"\n+                    \"dev-master\": \"1.0-dev\"\n                 }\n             },\n             \"autoload\": {\n-                \"psr-0\": {\n-                    \"Symfony\\\\Component\\\\EventDispatcher\\\\\": \"\"\n+                \"psr-4\": {\n+                    \"GuzzleHttp\\\\Psr7\\\\\": \"src\/\"\n+                },\n+                \"files\": [\n+                    \"src\/functions_include.php\"\n+                ]\n+            },\n+            \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n+            \"license\": [\n+                \"MIT\"\n+            ],\n+            \"authors\": [\n+                {\n+                    \"name\": \"Michael Dowling\",\n+                    \"email\": \"mtdowling@gmail.com\",\n+                    \"homepage\": \"https:\/\/github.com\/mtdowling\"\n                 }\n+            ],\n+            \"description\": \"PSR-7 message implementation\",\n+            \"keywords\": [\n+                \"http\",\n+                \"message\",\n+                \"stream\",\n+                \"uri\"\n+            ],\n+            \"time\": \"2016-04-13 19:56:01\"\n+        },\n+        {\n+            \"name\": \"ircmaxell\/password-compat\",\n+            \"version\": \"v1.0.4\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https:\/\/github.com\/ircmaxell\/password_compat.git\",\n+                \"reference\": \"5c5cde8822a69545767f7c7f3058cb15ff84614c\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/ircmaxell\/password_compat\/zipball\/5c5cde8822a69545767f7c7f3058cb15ff84614c\",\n+                \"reference\": \"5c5cde8822a69545767f7c7f3058cb15ff84614c\",\n+                \"shasum\": \"\"\n+            },\n+            \"require-dev\": {\n+                \"phpunit\/phpunit\": \"4.*\"\n+            },\n+            \"type\": \"library\",\n+            \"autoload\": {\n+                \"files\": [\n+                    \"lib\/password.php\"\n+                ]\n             },\n             \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n             \"license\": [\n@@ -312,50 +380,103 @@\n             ],\n             \"authors\": [\n                 {\n-                    \"name\": \"Fabien Potencier\",\n-                    \"email\": \"fabien@symfony.com\",\n-                    \"homepage\": \"http:\/\/fabien.potencier.org\",\n-                    \"role\": \"Lead Developer\"\n-                },\n+                    \"name\": \"Anthony Ferrara\",\n+                    \"email\": \"ircmaxell@php.net\",\n+                    \"homepage\": \"http:\/\/blog.ircmaxell.com\"\n+                }\n+            ],\n+            \"description\": \"A compatibility library for the proposed simplified password hashing algorithm: https:\/\/wiki.php.net\/rfc\/password_hash\",\n+            \"homepage\": \"https:\/\/github.com\/ircmaxell\/password_compat\",\n+            \"keywords\": [\n+                \"hashing\",\n+                \"password\"\n+            ],\n+            \"time\": \"2014-11-20 16:49:30\"\n+        },\n+        {\n+            \"name\": \"psr\/http-message\",\n+            \"version\": \"1.0\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https:\/\/github.com\/php-fig\/http-message.git\",\n+                \"reference\": \"85d63699f0dbedb190bbd4b0d2b9dc707ea4c298\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/php-fig\/http-message\/zipball\/85d63699f0dbedb190bbd4b0d2b9dc707ea4c298\",\n+                \"reference\": \"85d63699f0dbedb190bbd4b0d2b9dc707ea4c298\",\n+                \"shasum\": \"\"\n+            },\n+            \"require\": {\n+                \"php\": \">=5.3.0\"\n+            },\n+            \"type\": \"library\",\n+            \"extra\": {\n+                \"branch-alias\": {\n+                    \"dev-master\": \"1.0.x-dev\"\n+                }\n+            },\n+            \"autoload\": {\n+                \"psr-4\": {\n+                    \"Psr\\\\Http\\\\Message\\\\\": \"src\/\"\n+                }\n+            },\n+            \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n+            \"license\": [\n+                \"MIT\"\n+            ],\n+            \"authors\": [\n                 {\n-                    \"name\": \"Symfony Community\",\n-                    \"homepage\": \"http:\/\/symfony.com\/contributors\"\n+                    \"name\": \"PHP-FIG\",\n+                    \"homepage\": \"http:\/\/www.php-fig.org\/\"\n                 }\n             ],\n-            \"description\": \"Symfony EventDispatcher Component\",\n-            \"homepage\": \"http:\/\/symfony.com\",\n-            \"time\": \"2014-02-11 13:52:09\"\n+            \"description\": \"Common interface for HTTP messages\",\n+            \"keywords\": [\n+                \"http\",\n+                \"http-message\",\n+                \"psr\",\n+                \"psr-7\",\n+                \"request\",\n+                \"response\"\n+            ],\n+            \"time\": \"2015-05-04 20:22:00\"\n         },\n         {\n             \"name\": \"symfony\/http-foundation\",\n-            \"version\": \"v2.4.2\",\n-            \"target-dir\": \"Symfony\/Component\/HttpFoundation\",\n+            \"version\": \"v2.8.7\",\n             \"source\": {\n                 \"type\": \"git\",\n                 \"url\": \"https:\/\/github.com\/symfony\/http-foundation.git\",\n-                \"reference\": \"cdee7c84ba8b2a8aafa1c055f5cb4f640d81c129\"\n+                \"reference\": \"744dae663ffcfa21d8a111fb63541954199acbb2\"\n             },\n             \"dist\": {\n                 \"type\": \"zip\",\n-                \"url\": \"https:\/\/api.github.com\/repos\/symfony\/http-foundation\/zipball\/cdee7c84ba8b2a8aafa1c055f5cb4f640d81c129\",\n-                \"reference\": \"cdee7c84ba8b2a8aafa1c055f5cb4f640d81c129\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/symfony\/http-foundation\/zipball\/744dae663ffcfa21d8a111fb63541954199acbb2\",\n+                \"reference\": \"744dae663ffcfa21d8a111fb63541954199acbb2\",\n                 \"shasum\": \"\"\n             },\n             \"require\": {\n-                \"php\": \">=5.3.3\"\n+                \"php\": \">=5.3.9\",\n+                \"symfony\/polyfill-mbstring\": \"~1.1\",\n+                \"symfony\/polyfill-php54\": \"~1.0\",\n+                \"symfony\/polyfill-php55\": \"~1.0\"\n+            },\n+            \"require-dev\": {\n+                \"symfony\/expression-language\": \"~2.4|~3.0.0\"\n             },\n             \"type\": \"library\",\n             \"extra\": {\n                 \"branch-alias\": {\n-                    \"dev-master\": \"2.4-dev\"\n+                    \"dev-master\": \"2.8-dev\"\n                 }\n             },\n             \"autoload\": {\n-                \"psr-0\": {\n+                \"psr-4\": {\n                     \"Symfony\\\\Component\\\\HttpFoundation\\\\\": \"\"\n                 },\n-                \"classmap\": [\n-                    \"Symfony\/Component\/HttpFoundation\/Resources\/stubs\"\n+                \"exclude-from-classmap\": [\n+                    \"\/Tests\/\"\n                 ]\n             },\n             \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n@@ -365,18 +486,189 @@\n             \"authors\": [\n                 {\n                     \"name\": \"Fabien Potencier\",\n-                    \"email\": \"fabien@symfony.com\",\n-                    \"homepage\": \"http:\/\/fabien.potencier.org\",\n-                    \"role\": \"Lead Developer\"\n+                    \"email\": \"fabien@symfony.com\"\n                 },\n                 {\n                     \"name\": \"Symfony Community\",\n-                    \"homepage\": \"http:\/\/symfony.com\/contributors\"\n+                    \"homepage\": \"https:\/\/symfony.com\/contributors\"\n                 }\n             ],\n             \"description\": \"Symfony HttpFoundation Component\",\n-            \"homepage\": \"http:\/\/symfony.com\",\n-            \"time\": \"2014-02-11 15:39:28\"\n+            \"homepage\": \"https:\/\/symfony.com\",\n+            \"time\": \"2016-06-06 11:11:27\"\n+        },\n+        {\n+            \"name\": \"symfony\/polyfill-mbstring\",\n+            \"version\": \"v1.2.0\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https:\/\/github.com\/symfony\/polyfill-mbstring.git\",\n+                \"reference\": \"dff51f72b0706335131b00a7f49606168c582594\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/symfony\/polyfill-mbstring\/zipball\/dff51f72b0706335131b00a7f49606168c582594\",\n+                \"reference\": \"dff51f72b0706335131b00a7f49606168c582594\",\n+                \"shasum\": \"\"\n+            },\n+            \"require\": {\n+                \"php\": \">=5.3.3\"\n+            },\n+            \"suggest\": {\n+                \"ext-mbstring\": \"For best performance\"\n+            },\n+            \"type\": \"library\",\n+            \"extra\": {\n+                \"branch-alias\": {\n+                    \"dev-master\": \"1.2-dev\"\n+                }\n+            },\n+            \"autoload\": {\n+                \"psr-4\": {\n+                    \"Symfony\\\\Polyfill\\\\Mbstring\\\\\": \"\"\n+                },\n+                \"files\": [\n+                    \"bootstrap.php\"\n+                ]\n+            },\n+            \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n+            \"license\": [\n+                \"MIT\"\n+            ],\n+            \"authors\": [\n+                {\n+                    \"name\": \"Nicolas Grekas\",\n+                    \"email\": \"p@tchwork.com\"\n+                },\n+                {\n+                    \"name\": \"Symfony Community\",\n+                    \"homepage\": \"https:\/\/symfony.com\/contributors\"\n+                }\n+            ],\n+            \"description\": \"Symfony polyfill for the Mbstring extension\",\n+            \"homepage\": \"https:\/\/symfony.com\",\n+            \"keywords\": [\n+                \"compatibility\",\n+                \"mbstring\",\n+                \"polyfill\",\n+                \"portable\",\n+                \"shim\"\n+            ],\n+            \"time\": \"2016-05-18 14:26:46\"\n+        },\n+        {\n+            \"name\": \"symfony\/polyfill-php54\",\n+            \"version\": \"v1.2.0\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https:\/\/github.com\/symfony\/polyfill-php54.git\",\n+                \"reference\": \"34d761992f6f2cc6092cc0e5e93f38b53ba5e4f1\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/symfony\/polyfill-php54\/zipball\/34d761992f6f2cc6092cc0e5e93f38b53ba5e4f1\",\n+                \"reference\": \"34d761992f6f2cc6092cc0e5e93f38b53ba5e4f1\",\n+                \"shasum\": \"\"\n+            },\n+            \"require\": {\n+                \"php\": \">=5.3.3\"\n+            },\n+            \"type\": \"library\",\n+            \"extra\": {\n+                \"branch-alias\": {\n+                    \"dev-master\": \"1.2-dev\"\n+                }\n+            },\n+            \"autoload\": {\n+                \"psr-4\": {\n+                    \"Symfony\\\\Polyfill\\\\Php54\\\\\": \"\"\n+                },\n+                \"files\": [\n+                    \"bootstrap.php\"\n+                ],\n+                \"classmap\": [\n+                    \"Resources\/stubs\"\n+                ]\n+            },\n+            \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n+            \"license\": [\n+                \"MIT\"\n+            ],\n+            \"authors\": [\n+                {\n+                    \"name\": \"Nicolas Grekas\",\n+                    \"email\": \"p@tchwork.com\"\n+                },\n+                {\n+                    \"name\": \"Symfony Community\",\n+                    \"homepage\": \"https:\/\/symfony.com\/contributors\"\n+                }\n+            ],\n+            \"description\": \"Symfony polyfill backporting some PHP 5.4+ features to lower PHP versions\",\n+            \"homepage\": \"https:\/\/symfony.com\",\n+            \"keywords\": [\n+                \"compatibility\",\n+                \"polyfill\",\n+                \"portable\",\n+                \"shim\"\n+            ],\n+            \"time\": \"2016-05-18 14:26:46\"\n+        },\n+        {\n+            \"name\": \"symfony\/polyfill-php55\",\n+            \"version\": \"v1.2.0\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https:\/\/github.com\/symfony\/polyfill-php55.git\",\n+                \"reference\": \"bf2ff9ad6be1a4772cb873e4eea94d70daa95c6d\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https:\/\/api.github.com\/repos\/symfony\/polyfill-php55\/zipball\/bf2ff9ad6be1a4772cb873e4eea94d70daa95c6d\",\n+                \"reference\": \"bf2ff9ad6be1a4772cb873e4eea94d70daa95c6d\",\n+                \"shasum\": \"\"\n+            },\n+            \"require\": {\n+                \"ircmaxell\/password-compat\": \"~1.0\",\n+                \"php\": \">=5.3.3\"\n+            },\n+            \"type\": \"library\",\n+            \"extra\": {\n+                \"branch-alias\": {\n+                    \"dev-master\": \"1.2-dev\"\n+                }\n+            },\n+            \"autoload\": {\n+                \"psr-4\": {\n+                    \"Symfony\\\\Polyfill\\\\Php55\\\\\": \"\"\n+                },\n+                \"files\": [\n+                    \"bootstrap.php\"\n+                ]\n+            },\n+            \"notification-url\": \"https:\/\/packagist.org\/downloads\/\",\n+            \"license\": [\n+                \"MIT\"\n+            ],\n+            \"authors\": [\n+                {\n+                    \"name\": \"Nicolas Grekas\",\n+                    \"email\": \"p@tchwork.com\"\n+                },\n+                {\n+                    \"name\": \"Symfony Community\",\n+                    \"homepage\": \"https:\/\/symfony.com\/contributors\"\n+                }\n+            ],\n+            \"description\": \"Symfony polyfill backporting some PHP 5.5+ features to lower PHP versions\",\n+            \"homepage\": \"https:\/\/symfony.com\",\n+            \"keywords\": [\n+                \"compatibility\",\n+                \"polyfill\",\n+                \"portable\",\n+                \"shim\"\n+            ],\n+            \"time\": \"2016-05-18 14:26:46\"\n         }\n     ],\n     \"packages-dev\": [\n@@ -429,6 +721,7 @@\n                 \"source\": \"https:\/\/github.com\/fabpot\/PHP-CS-Fixer\/tree\/master\",\n                 \"issues\": \"https:\/\/github.com\/fabpot\/PHP-CS-Fixer\/issues\"\n             },\n+            \"abandoned\": \"friendsofphp\/php-cs-fixer\",\n             \"time\": \"2014-03-03 13:52:15\"\n         },\n         {\n\nFrom f5aa8bf85a264a093269818c2e425b97c9a9ed32 Mon Sep 17 00:00:00 2001\nFrom: Stephan Vock <stephan.vock@gmail.com>\nDate: Wed, 22 Jun 2016 14:45:26 +0200\nSubject: [PATCH 3\/4] Guzzle6: adjust tests for new version\n\n---\n phpunit.xml.dist                                   |  1 +\n tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php  | 41 +++++--------\n ...\/EasyBib\/Tests\/Api\/Client\/ApiMockResponses.php  | 48 +++++++++------\n ...\/Api\/Client\/ApiResource\/ApiResourceTest.php     | 47 +++++----------\n ...\/Api\/Client\/ApiResource\/CollectionTest.php      | 10 ++--\n ...\/Api\/Client\/ApiResource\/ResourceFactoryTest.php |  2 +-\n ...\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php  | 70 ++++++++++------------\n ...\/Mocks\/Api\/Client\/ExceptionMockRedirector.php   | 17 ++++++\n ...\/Mocks\/Api\/Client\/MockRedirectException.php     |  7 +++\n 9 files changed, 121 insertions(+), 122 deletions(-)\n create mode 100644 tests\/EasyBib\/Tests\/Mocks\/Api\/Client\/ExceptionMockRedirector.php\n create mode 100644 tests\/EasyBib\/Tests\/Mocks\/Api\/Client\/MockRedirectException.php\n\ndiff --git a\/phpunit.xml.dist b\/phpunit.xml.dist\nindex bcb3db8..99fd83e 100644\n--- a\/phpunit.xml.dist\n+++ b\/phpunit.xml.dist\n@@ -8,6 +8,7 @@\n          processIsolation=\"false\"\n          stopOnFailure=\"false\"\n          syntaxCheck=\"false\"\n+         bootstrap=\".\/vendor\/autoload.php\"\n         >\n     <testsuites>\n         <testsuite name=\"EasyBib API Client test suite\">\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php\nindex ac5c7f9..e34facf 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php\n@@ -4,13 +4,14 @@\n \n use EasyBib\\Api\\Client\\ApiBuilder;\n use EasyBib\\Api\\Client\\ApiResource\\ApiResource;\n+use EasyBib\\Api\\Client\\ApiTraverser;\n use EasyBib\\OAuth2\\Client\\TokenStore;\n-use EasyBib\\Tests\\Mocks\\OAuth2\\Client\\ExceptionMockRedirector;\n-use EasyBib\\Tests\\Mocks\\OAuth2\\Client\\MockRedirectException;\n-use Guzzle\\Http\\Client;\n-use Guzzle\\Http\\Message\\Response;\n-use Guzzle\\Plugin\\History\\HistoryPlugin;\n-use Guzzle\\Plugin\\Mock\\MockPlugin;\n+use EasyBib\\Tests\\Mocks\\Api\\Client\\ExceptionMockRedirector;\n+use EasyBib\\Tests\\Mocks\\Api\\Client\\MockRedirectException;\n+use GuzzleHttp\\Client;\n+use GuzzleHttp\\Handler\\MockHandler;\n+use GuzzleHttp\\HandlerStack;\n+use GuzzleHttp\\Psr7\\Response;\n use Symfony\\Component\\HttpFoundation\\Session\\Session;\n use Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockArraySessionStorage;\n \n@@ -30,12 +31,6 @@ class ApiBuilderTest extends \\PHPUnit_Framework_TestCase\n      * @var string\n      *\/\n     protected $dataBaseUrl = 'http:\/\/data.easybib.example.com';\n-\n-    \/**\n-     * @var HistoryPlugin\n-     *\/\n-    protected $history;\n-\n     \/**\n      * @var Client\n      *\/\n@@ -52,12 +47,12 @@ class ApiBuilderTest extends \\PHPUnit_Framework_TestCase\n     protected $api;\n \n     \/**\n-     * @var MockPlugin\n+     * @var MockHandler\n      *\/\n     protected $apiMockResponses;\n \n     \/**\n-     * @var MockPlugin\n+     * @var MockHandler\n      *\/\n     protected $oauthMockResponses;\n \n@@ -75,18 +70,12 @@ public function setUp()\n     {\n         parent::setUp();\n \n-        $this->apiHttpClient = new Client($this->dataBaseUrl);\n-        $this->apiMockResponses = new MockPlugin();\n-        $this->history = new HistoryPlugin();\n-        $this->apiHttpClient->addSubscriber($this->apiMockResponses);\n-        $this->apiHttpClient->addSubscriber($this->history);\n+        $this->apiMockResponses = new MockHandler();\n+        $this->apiHttpClient = new Client(['base_uri' => $this->dataBaseUrl, 'handler' => HandlerStack::create($this->apiMockResponses)]);\n         $this->apiResponses = new ApiMockResponses($this->apiMockResponses);\n \n-        $this->oauthMockResponses = new MockPlugin();\n-\n-        $this->oauthHttpClient = new Client($this->idBaseUrl);\n-        $this->oauthHttpClient->addSubscriber(new HistoryPlugin());\n-        $this->oauthHttpClient->addSubscriber($this->oauthMockResponses);\n+        $this->oauthMockResponses = new MockHandler();\n+        $this->oauthHttpClient = new Client(['base_uri' => $this->idBaseUrl, 'handler' => HandlerStack::create($this->oauthMockResponses)]);\n \n         $session = new Session(new MockArraySessionStorage());\n         $this->tokenStore = new TokenStore($session);\n@@ -102,7 +91,7 @@ public function testAuthorizationCodeGrant()\n     {\n         $api = $this->builder->createWithAuthorizationCodeGrant([\n             'client_id' => 'ABC123',\n-            'redirect_url' => 'http:\/\/foo.example.com\/handle-auth-code',\n+            'redirect_uri' => 'http:\/\/foo.example.com\/handle-auth-code',\n         ]);\n \n         $this->setExpectedException(MockRedirectException::class);\n@@ -137,6 +126,6 @@ private function prepareTokenResponse()\n             ])\n         );\n \n-        $this->oauthMockResponses->addResponse($response);\n+        $this->oauthMockResponses->append($response);\n     }\n }\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiMockResponses.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiMockResponses.php\nindex ed86c4e..afdc9be 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiMockResponses.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiMockResponses.php\n@@ -2,6 +2,7 @@\n \n namespace EasyBib\\Tests\\Api\\Client;\n \n+use EasyBib\\Guzzle\\BearerAuthMiddleware;\n use EasyBib\\OAuth2\\Client\\AuthorizationCodeGrant;\n use EasyBib\\OAuth2\\Client\\AuthorizationCodeGrant\\AuthorizationCodeSession;\n use EasyBib\\OAuth2\\Client\\JsonWebTokenGrant;\n@@ -10,11 +11,12 @@\n use EasyBib\\OAuth2\\Client\\ServerConfig;\n use EasyBib\\OAuth2\\Client\\SimpleSession;\n use EasyBib\\OAuth2\\Client\\TokenStore;\n-use EasyBib\\Tests\\Mocks\\OAuth2\\Client\\ExceptionMockRedirector;\n-use Guzzle\\Http\\Client;\n-use Guzzle\\Http\\ClientInterface;\n-use Guzzle\\Http\\Message\\Response;\n-use Guzzle\\Plugin\\Mock\\MockPlugin;\n+use EasyBib\\Tests\\Mocks\\Api\\Client\\ExceptionMockRedirector;\n+use GuzzleHttp\\Client;\n+use GuzzleHttp\\ClientInterface;\n+use GuzzleHttp\\Handler\\MockHandler;\n+use GuzzleHttp\\HandlerStack;\n+use GuzzleHttp\\Psr7\\Response;\n use Symfony\\Component\\HttpFoundation\\Session\\Session;\n use Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockArraySessionStorage;\n \n@@ -26,9 +28,9 @@ class ApiMockResponses\n     private $mocks;\n \n     \/**\n-     * @param MockPlugin $mocks\n+     * @param MockHandler $mocks\n      *\/\n-    public function __construct(MockPlugin $mocks)\n+    public function __construct(MockHandler $mocks)\n     {\n         $this->mocks = $mocks;\n     }\n@@ -43,7 +45,7 @@ public function prepareResource(\n     ) {\n         $payload = ['status' => 'ok'] + $resource;\n \n-        $this->mocks->addResponse(\n+        $this->mocks->append(\n             new Response(200, [], json_encode($payload))\n         );\n \n@@ -57,7 +59,7 @@ public function prepareExpiredTokenError()\n             'error_description' => 'The access token provided has expired',\n         ]);\n \n-        $this->mocks->addResponse(\n+        $this->mocks->append(\n             new Response(400, [], $body)\n         );\n     }\n@@ -68,7 +70,7 @@ public function prepareUnauthorizedTokenError()\n             'msg' => 'The project you requested is not valid for this token.',\n         ]);\n \n-        $this->mocks->addResponse(\n+        $this->mocks->append(\n             new Response(403, [], $body)\n         );\n     }\n@@ -77,7 +79,7 @@ public function prepareInvalidJson()\n     {\n         $body = 'blah';\n \n-        $this->mocks->addResponse(\n+        $this->mocks->append(\n             new Response(200, [], $body)\n         );\n     }\n@@ -90,7 +92,7 @@ public function prepareApiError(array $error, $code = 400)\n     {\n         $body = json_encode($error);\n \n-        $this->mocks->addResponse(\n+        $this->mocks->append(\n             new Response($code, [], $body)\n         );\n     }\n@@ -103,7 +105,7 @@ public function prepareInfrastructureError($code)\n         $headers = ['Content-Type' => 'text\/html'];\n         $body = '<html><head><\/head><body>Some error<\/body><\/html>';\n \n-        $this->mocks->addResponse(\n+        $this->mocks->append(\n             new Response($code, $headers, $body)\n         );\n     }\n@@ -115,7 +117,7 @@ public function prepareApiMsg($message)\n     {\n         $body = json_encode(['msg' => $message]);\n \n-        $this->mocks->addResponse(\n+        $this->mocks->append(\n             new Response(400, [], $body)\n         );\n     }\n@@ -139,7 +141,7 @@ public function registerWithJwtSession($accessToken, ClientInterface $resourceHt\n             'token_endpoint' => '\/oauth\/token',\n         ]);\n \n-        $oauthHttpClient = new Client('http:\/\/id.easybib.example.com');\n+        $oauthHttpClient = new Client(['base_uri' => 'http:\/\/id.easybib.example.com']);\n \n         $tokenRequestFactory = new TokenRequestFactory(\n             $clientConfig,\n@@ -152,7 +154,12 @@ public function registerWithJwtSession($accessToken, ClientInterface $resourceHt\n \n         $oauthSession = new SimpleSession($tokenRequestFactory);\n         $oauthSession->setTokenStore($tokenStore);\n-        $oauthSession->addResourceClient($resourceHttpClient);\n+\n+        \/** @var HandlerStack $handler *\/\n+        $handler = $resourceHttpClient->getConfig('handler');\n+        $handler->push(function ($callable) use ($oauthSession) {\n+            return new BearerAuthMiddleware($callable, $oauthSession);\n+        });\n     }\n \n     \/**\n@@ -175,7 +182,7 @@ public function registerWithAuthCodeSession($accessToken, ClientInterface $resou\n             'token_endpoint' => '\/oauth\/token',\n         ]);\n \n-        $oauthHttpClient = new Client('http:\/\/id.easybib.example.com');\n+        $oauthHttpClient = new Client(['base_uri' => 'http:\/\/id.easybib.example.com']);\n \n         $oauthSession = new AuthorizationCodeSession(\n             $oauthHttpClient,\n@@ -186,6 +193,11 @@ public function registerWithAuthCodeSession($accessToken, ClientInterface $resou\n \n         $oauthSession->setTokenStore($tokenStore);\n         $oauthSession->setScope(new Scope(['USER_READ', 'DATA_READ_WRITE']));\n-        $oauthSession->addResourceClient($resourceHttpClient);\n+\n+        \/** @var HandlerStack $handler *\/\n+        $handler = $resourceHttpClient->getConfig('handler');\n+        $handler->push(function ($callable) use ($oauthSession) {\n+            return new BearerAuthMiddleware($callable, $oauthSession);\n+        });\n     }\n }\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php\nindex 5bb006d..2eb3fe5 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php\n@@ -7,29 +7,22 @@\n use EasyBib\\Api\\Client\\ApiResource\\ResourceFactory;\n use EasyBib\\Api\\Client\\Validation\\ResourceNotFoundException;\n use EasyBib\\Tests\\Api\\Client\\ApiMockResponses;\n-use Guzzle\\Http\\Client;\n-use Guzzle\\Http\\Message\\Response;\n-use Guzzle\\Plugin\\History\\HistoryPlugin;\n-use Guzzle\\Plugin\\Mock\\MockPlugin;\n+use GuzzleHttp\\Client;\n+use GuzzleHttp\\Handler\\MockHandler;\n+use GuzzleHttp\\HandlerStack;\n+use GuzzleHttp\\Psr7\\Response;\n \n class ApiResourceTest extends \\PHPUnit_Framework_TestCase\n {\n+    \/** @var MockHandler *\/\n+    protected $mockHandler;\n+\n     \/**\n      * @var ApiMockResponses\n      *\/\n     private $apiResponses;\n \n     \/**\n-     * @var HistoryPlugin\n-     *\/\n-    private $history;\n-\n-    \/**\n-     * @var MockPlugin\n-     *\/\n-    private $mockResponses;\n-\n-    \/**\n      * @var Client\n      *\/\n     private $httpClient;\n@@ -41,15 +34,11 @@ class ApiResourceTest extends \\PHPUnit_Framework_TestCase\n \n     public function setUp()\n     {\n-        $this->history = new HistoryPlugin();\n-        $this->mockResponses = new MockPlugin();\n-\n-        $this->httpClient = new Client();\n-        $this->httpClient->addSubscriber($this->history);\n-        $this->httpClient->addSubscriber($this->mockResponses);\n+        $this->mockHandler = new MockHandler();\n+        $this->httpClient = new Client(['handler' => HandlerStack::create($this->mockHandler)]);\n \n         $this->api = new ApiTraverser($this->httpClient);\n-        $this->apiResponses = new ApiMockResponses($this->mockResponses);\n+        $this->apiResponses = new ApiMockResponses($this->mockHandler);\n     }\n \n     public function testGetWithGoodRel()\n@@ -162,10 +151,10 @@ public function testDeleteWithGoodRel()\n \n         $this->apiResponses->prepareResource($nextResource);\n \n-        $firstResource->delete('foo rel', $nextResource);\n-        $lastRequest = $this->history->getLastRequest();\n+        $firstResource->delete('foo rel');\n+        $lastRequest = $this->mockHandler->getLastRequest();\n         $this->assertEquals('DELETE', $lastRequest->getMethod());\n-        $this->assertEquals('http:\/\/foo\/', $lastRequest->getUrl());\n+        $this->assertEquals('http:\/\/foo\/', $lastRequest->getUri());\n     }\n \n     public function testDeleteWithBadRed()\n@@ -177,7 +166,7 @@ public function testDeleteWithBadRed()\n         $this->apiResponses->prepareResource($nextResource);\n \n         $this->setExpectedException(ResourceNotFoundException::class);\n-        $firstResource->delete('no such rel', []);\n+        $firstResource->delete('no such rel');\n     }\n \n     \/**\n@@ -284,7 +273,7 @@ public function testIsCurrentUserAuthorNoAuthorRelation()\n \n     \/**\n      * @param \\stdClass $data\n-     * @return Resource\n+     * @return ApiResource\n      *\/\n     private function getResource(\\stdClass $data = null)\n     {\n@@ -326,11 +315,7 @@ private function getResourceFromResponse($body = null, array $headers = [])\n             ]);\n         }\n \n-        $response = new Response(200);\n-        $response->setBody($body);\n-        $response->setHeaders($headers);\n-\n-        return $this->getResourceFactory()->createFromResponse($response);\n+        return $this->getResourceFactory()->createFromResponse(new Response(200, $headers, $body));\n     }\n \n     \/**\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php\nindex ed1bbe2..5fc6156 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php\n@@ -6,8 +6,8 @@\n use EasyBib\\Api\\Client\\ApiResource\\Collection;\n use EasyBib\\Api\\Client\\ApiResource\\ApiResource;\n use EasyBib\\Api\\Client\\ApiResource\\ResourceFactory;\n-use Guzzle\\Http\\Client;\n-use Guzzle\\Http\\Message\\Response;\n+use GuzzleHttp\\Client;\n+use GuzzleHttp\\Psr7\\Response;\n \n class CollectionTest extends \\PHPUnit_Framework_TestCase\n {\n@@ -174,7 +174,7 @@ public function testSetTotalRows($totalRows)\n     public function testTotalRowsCreatedFromResponse()\n     {\n         $collection = $this->createFromResponseWithHeaders(['X-EasyBib-TotalRows' => 42]);\n-        $this->assertSame(42, $collection->getTotalRows());\n+        $this->assertSame(42, (int)$collection->getTotalRows());\n \n         $collection = $this->createFromResponseWithHeaders([]);\n         $this->assertNull($collection->getTotalRows());\n@@ -183,9 +183,7 @@ public function testTotalRowsCreatedFromResponse()\n     private function createFromResponseWithHeaders($headers)\n     {\n         $data = $this->dataProvider()[0][0];\n-        $response = new Response(200);\n-        $response->setBody(json_encode($data));\n-        $response->setHeaders($headers);\n+        $response = new Response(200, $headers, json_encode($data));\n \n         $resourceFactory = new ResourceFactory(new ApiTraverser(new Client()));\n         return $resourceFactory->createFromResponse($response);\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php\nindex 8c246a5..c7e9da5 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php\n@@ -6,7 +6,7 @@\n use EasyBib\\Api\\Client\\ApiResource\\Collection;\n use EasyBib\\Api\\Client\\ApiResource\\ResourceErrorException;\n use EasyBib\\Api\\Client\\ApiResource\\ResourceFactory;\n-use Guzzle\\Http\\Client;\n+use GuzzleHttp\\Client;\n \n class ResourceFactoryTest extends \\PHPUnit_Framework_TestCase\n {\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php\nindex d243fc0..3eec0c8 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php\n@@ -19,10 +19,10 @@\n use EasyBib\\OAuth2\\Client\\AuthorizationCodeGrant\\ClientConfig;\n use EasyBib\\OAuth2\\Client\\ServerConfig;\n use EasyBib\\OAuth2\\Client\\TokenStore;\n-use Guzzle\\Http\\Client;\n-use Guzzle\\Http\\Message\\Response;\n-use Guzzle\\Plugin\\History\\HistoryPlugin;\n-use Guzzle\\Plugin\\Mock\\MockPlugin;\n+use GuzzleHttp\\Client;\n+use GuzzleHttp\\Handler\\MockHandler;\n+use GuzzleHttp\\HandlerStack;\n+use GuzzleHttp\\Psr7\\Response;\n use Symfony\\Component\\HttpFoundation\\Session\\Session;\n use Symfony\\Component\\HttpFoundation\\Session\\Storage\\MockArraySessionStorage;\n \n@@ -39,11 +39,6 @@ class ApiTraverserTest extends \\PHPUnit_Framework_TestCase\n     protected $dataBaseUrl = 'http:\/\/data.easybib.example.com';\n \n     \/**\n-     * @var HistoryPlugin\n-     *\/\n-    protected $history;\n-\n-    \/**\n      * @var Client\n      *\/\n     protected $resourceHttpClient;\n@@ -54,11 +49,6 @@ class ApiTraverserTest extends \\PHPUnit_Framework_TestCase\n     protected $api;\n \n     \/**\n-     * @var MockPlugin\n-     *\/\n-    protected $mockResponses;\n-\n-    \/**\n      * @var TokenStore\n      *\/\n     protected $tokenStore;\n@@ -78,26 +68,26 @@ class ApiTraverserTest extends \\PHPUnit_Framework_TestCase\n      *\/\n     protected $authorization;\n \n+    \/** @var MockHandler *\/\n+    private $mockHandler;\n+\n     public function setUp()\n     {\n         parent::setUp();\n \n         $this->clientConfig = new ClientConfig([\n             'client_id' => 'client_123',\n-            'redirect_url' => 'http:\/\/myapp.example.com\/',\n+            'redirect_uri' => 'http:\/\/myapp.example.com\/',\n         ]);\n \n-        $this->resourceHttpClient = new Client($this->dataBaseUrl);\n-        $this->mockResponses = new MockPlugin();\n-        $this->history = new HistoryPlugin();\n-        $this->resourceHttpClient->addSubscriber($this->mockResponses);\n-        $this->resourceHttpClient->addSubscriber($this->history);\n+        $this->mockHandler = new MockHandler();\n+        $this->resourceHttpClient = new Client(['base_uri' => $this->dataBaseUrl, 'handler' => HandlerStack::create($this->mockHandler)]);\n \n         $this->tokenStore = new TokenStore(new Session(new MockArraySessionStorage()));\n         $this->authorization = new AuthorizationResponse(['code' => 'ABC123']);\n \n         $this->api = new ApiTraverser($this->resourceHttpClient);\n-        $this->apiResponses = new ApiMockResponses($this->mockResponses);\n+        $this->apiResponses = new ApiMockResponses($this->mockHandler);\n     }\n \n     \/**\n@@ -262,10 +252,10 @@ public function testGetProject()\n \n         $response = $this->api->getProject($projectId);\n \n-        $lastRequest = $this->history->getLastRequest();\n+        $lastRequest = $this->mockHandler->getLastRequest();\n \n         $this->shouldHaveMadeAnApiRequest('GET');\n-        $this->assertEquals($this->api->getProjectsBaseUrl() . $projectId, $lastRequest->getUrl());\n+        $this->assertEquals($this->api->getProjectsBaseUrl() . $projectId, $lastRequest->getUri());\n         $this->shouldHaveReturnedAResource($project, $response);\n     }\n \n@@ -279,10 +269,10 @@ public function testPostProject()\n         $this->apiResponses->prepareResource($project);\n \n         $response = $this->api->postProject($project);\n-        $lastRequest = $this->history->getLastRequest();\n+        $lastRequest = $this->mockHandler->getLastRequest();\n \n         $this->shouldHaveMadeAnApiRequest('POST');\n-        $this->assertEquals($this->api->getProjectsBaseUrl(), $lastRequest->getUrl());\n+        $this->assertEquals($this->api->getProjectsBaseUrl(), $lastRequest->getUri());\n         $this->shouldHaveReturnedAResource($project, $response);\n     }\n \n@@ -311,11 +301,11 @@ public function testPostToBulkResolver()\n         $this->apiResponses->prepareResource($projects);\n \n         $response = $this->api->postToBulkResolver($links);\n-        $lastRequest = $this->history->getLastRequest();\n+        $lastRequest = $this->mockHandler->getLastRequest();\n \n         $this->shouldHaveMadeAnApiRequest('POST');\n-        $this->assertEquals($this->dataBaseUrl . '\/resolve', $lastRequest->getUrl());\n-        $this->assertEquals(json_encode(['links' => $links]), $lastRequest->getBody()->__toString());\n+        $this->assertEquals($this->dataBaseUrl . '\/resolve', $lastRequest->getUri());\n+        $this->assertEquals(json_encode(['links' => $links]), (string)$lastRequest->getBody());\n         $this->shouldHaveReturnedACollection($projects, $response);\n     }\n \n@@ -413,7 +403,7 @@ public function testGetWithInfrastructureError()\n     {\n         $this->apiResponses->prepareInfrastructureError(504);\n \n-        $this->setExpectedException(InfrastructureErrorException::class, 504);\n+        $this->setExpectedException(InfrastructureErrorException::class, (string)504);\n \n         $this->api->get('url placeholder');\n     }\n@@ -553,12 +543,12 @@ public function testPatch()\n \n     public function testGetDoesNotFollowRedirects()\n     {\n-        $this->mockResponses->addResponse(new Response(302, ['Location' => 'http:\/\/foo.example.com\/'], '{}'));\n-        $this->mockResponses->addResponse(new Response(200, [], '{}'));\n+        $this->mockHandler->append(new Response(302, ['Location' => 'http:\/\/foo.example.com\/'], '{}'));\n+        $this->mockHandler->append(new Response(200, [], '{}'));\n \n         $this->api->getUser();\n \n-        $this->assertEquals(1, count($this->history));\n+        $this->assertEquals(1, count($this->mockHandler->count()));\n     }\n \n     public function testGetWritesToCache()\n@@ -614,14 +604,14 @@ public function testGetProjectsBaseUrl()\n      *\/\n     private function shouldHaveMadeAnApiRequest($httpMethod, array $queryParams = [])\n     {\n-        $lastRequest = $this->history->getLastRequest();\n+        $lastRequest = $this->mockHandler->getLastRequest();\n \n         $this->assertEquals($httpMethod, $lastRequest->getMethod());\n-        $this->assertEquals($queryParams, $lastRequest->getQuery()->toArray());\n+        $parsedQuery = \\GuzzleHttp\\Psr7\\parse_query($lastRequest->getUri()->getQuery());\n+        $this->assertEquals($queryParams, $parsedQuery);\n \n         $this->assertTrue(\n-            $lastRequest->getHeader('Accept')\n-                ->hasValue('application\/vnd.com.easybib.data+json')\n+            in_array('application\/vnd.com.easybib.data+json', $lastRequest->getHeader('Accept'))\n         );\n     }\n \n@@ -680,10 +670,10 @@ private function assertSameData(array $expectedResponseArray, ApiResource $resou\n      *\/\n     private function shouldHaveHadATokenWithLastRequest($accessToken)\n     {\n-        $this->assertTrue(\n-            $this->history->getLastRequest()->getHeader('Authorization')\n-                ->hasValue('Bearer ' . $accessToken)\n-        );\n+        $this->assertTrue(in_array(\n+            'Bearer ' . $accessToken,\n+            $this->mockHandler->getLastRequest()->getHeader('Authorization')\n+        ));\n     }\n \n     \/**\ndiff --git a\/tests\/EasyBib\/Tests\/Mocks\/Api\/Client\/ExceptionMockRedirector.php b\/tests\/EasyBib\/Tests\/Mocks\/Api\/Client\/ExceptionMockRedirector.php\nnew file mode 100644\nindex 0000000..7c34b4a\n--- \/dev\/null\n+++ b\/tests\/EasyBib\/Tests\/Mocks\/Api\/Client\/ExceptionMockRedirector.php\n@@ -0,0 +1,17 @@\n+<?php\n+\n+namespace EasyBib\\Tests\\Mocks\\Api\\Client;\n+\n+use EasyBib\\OAuth2\\Client\\AuthorizationCodeGrant\\RedirectorInterface;\n+\n+class ExceptionMockRedirector implements RedirectorInterface\n+{\n+    \/**\n+     * @param string $url\n+     * @throws MockRedirectException\n+     *\/\n+    public function redirect($url)\n+    {\n+        throw new MockRedirectException('Redirecting to ' . $url);\n+    }\n+}\ndiff --git a\/tests\/EasyBib\/Tests\/Mocks\/Api\/Client\/MockRedirectException.php b\/tests\/EasyBib\/Tests\/Mocks\/Api\/Client\/MockRedirectException.php\nnew file mode 100644\nindex 0000000..5e960d3\n--- \/dev\/null\n+++ b\/tests\/EasyBib\/Tests\/Mocks\/Api\/Client\/MockRedirectException.php\n@@ -0,0 +1,7 @@\n+<?php\n+\n+namespace EasyBib\\Tests\\Mocks\\Api\\Client;\n+\n+class MockRedirectException extends \\Exception\n+{\n+}\n\nFrom cc4bec1846bcdfa3744da84298135f70a76ff147 Mon Sep 17 00:00:00 2001\nFrom: Stephan Vock <stephan.vock@gmail.com>\nDate: Wed, 22 Jun 2016 14:55:09 +0200\nSubject: [PATCH 4\/4] cs + md fixes\n\n---\n src\/EasyBib\/Api\/Client\/ApiBuilder.php                          |  3 ++-\n src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php         |  1 -\n src\/EasyBib\/Api\/Client\/ApiTraverser.php                        |  8 ++++----\n tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php              | 10 ++++++++--\n tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php |  3 ++-\n tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php  |  5 +++--\n ...\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php       |  3 ++-\n tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php            |  9 ++++++---\n 8 files changed, 27 insertions(+), 15 deletions(-)\n\ndiff --git a\/src\/EasyBib\/Api\/Client\/ApiBuilder.php b\/src\/EasyBib\/Api\/Client\/ApiBuilder.php\nindex 266e1a8..edcf19f 100644\n--- a\/src\/EasyBib\/Api\/Client\/ApiBuilder.php\n+++ b\/src\/EasyBib\/Api\/Client\/ApiBuilder.php\n@@ -2,6 +2,7 @@\n \n namespace EasyBib\\Api\\Client;\n \n+use Doctrine\\Common\\Cache\\ArrayCache;\n use EasyBib\\Guzzle\\BearerAuthMiddleware;\n use EasyBib\\OAuth2\\Client\\AbstractSession;\n use EasyBib\\OAuth2\\Client\\AuthorizationCodeGrant;\n@@ -163,7 +164,7 @@ private function buildApiTraverser(AbstractSession $oauthSession, $url)\n             return new BearerAuthMiddleware($callable, $oauthSession);\n         });\n \n-        return new ApiTraverser($apiHttpClient);\n+        return new ApiTraverser($apiHttpClient, new ArrayCache());\n     }\n \n     \/**\ndiff --git a\/src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php b\/src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php\nindex d997b0b..9100413 100644\n--- a\/src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php\n+++ b\/src\/EasyBib\/Api\/Client\/ApiResource\/ResourceFactory.php\n@@ -3,7 +3,6 @@\n namespace EasyBib\\Api\\Client\\ApiResource;\n \n use EasyBib\\Api\\Client\\ApiTraverser;\n-use Guzzle\\Http\\Message\\Response;\n use Psr\\Http\\Message\\ResponseInterface;\n \n class ResourceFactory\ndiff --git a\/src\/EasyBib\/Api\/Client\/ApiTraverser.php b\/src\/EasyBib\/Api\/Client\/ApiTraverser.php\nindex ed0994d..1452936 100644\n--- a\/src\/EasyBib\/Api\/Client\/ApiTraverser.php\n+++ b\/src\/EasyBib\/Api\/Client\/ApiTraverser.php\n@@ -2,7 +2,6 @@\n \n namespace EasyBib\\Api\\Client;\n \n-use Doctrine\\Common\\Cache\\ArrayCache;\n use Doctrine\\Common\\Cache\\CacheProvider;\n use EasyBib\\Api\\Client\\ApiResource\\ApiResource;\n use EasyBib\\Api\\Client\\ApiResource\\Collection;\n@@ -33,12 +32,13 @@ class ApiTraverser\n \n     \/**\n      * @param ClientInterface $httpClient\n+     * @param CacheProvider $cacheProvider\n      *\/\n-    public function __construct(ClientInterface $httpClient)\n+    public function __construct(ClientInterface $httpClient, CacheProvider $cacheProvider)\n     {\n-        $this->httpClient = $httpClient;\n+        $this->setCache($cacheProvider);\n \n-        $this->cache = new Cache(new ArrayCache());\n+        $this->httpClient = $httpClient;\n         $this->resourceFactory = new ResourceFactory($this);\n \n         \/** @var HandlerStack $handler *\/\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php\nindex e34facf..e7a3a95 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiBuilderTest.php\n@@ -71,11 +71,17 @@ public function setUp()\n         parent::setUp();\n \n         $this->apiMockResponses = new MockHandler();\n-        $this->apiHttpClient = new Client(['base_uri' => $this->dataBaseUrl, 'handler' => HandlerStack::create($this->apiMockResponses)]);\n+        $this->apiHttpClient = new Client([\n+            'base_uri' => $this->dataBaseUrl,\n+            'handler' => HandlerStack::create($this->apiMockResponses),\n+        ]);\n         $this->apiResponses = new ApiMockResponses($this->apiMockResponses);\n \n         $this->oauthMockResponses = new MockHandler();\n-        $this->oauthHttpClient = new Client(['base_uri' => $this->idBaseUrl, 'handler' => HandlerStack::create($this->oauthMockResponses)]);\n+        $this->oauthHttpClient = new Client([\n+            'base_uri' => $this->idBaseUrl,\n+            'handler' => HandlerStack::create($this->oauthMockResponses),\n+        ]);\n \n         $session = new Session(new MockArraySessionStorage());\n         $this->tokenStore = new TokenStore($session);\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php\nindex 2eb3fe5..c3f8906 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ApiResourceTest.php\n@@ -2,6 +2,7 @@\n \n namespace EasyBib\\Tests\\Api\\Client\\ApiResource;\n \n+use Doctrine\\Common\\Cache\\ArrayCache;\n use EasyBib\\Api\\Client\\ApiTraverser;\n use EasyBib\\Api\\Client\\ApiResource\\ApiResource;\n use EasyBib\\Api\\Client\\ApiResource\\ResourceFactory;\n@@ -37,7 +38,7 @@ public function setUp()\n         $this->mockHandler = new MockHandler();\n         $this->httpClient = new Client(['handler' => HandlerStack::create($this->mockHandler)]);\n \n-        $this->api = new ApiTraverser($this->httpClient);\n+        $this->api = new ApiTraverser($this->httpClient, new ArrayCache());\n         $this->apiResponses = new ApiMockResponses($this->mockHandler);\n     }\n \ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php\nindex 5fc6156..0f0033c 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/CollectionTest.php\n@@ -2,6 +2,7 @@\n \n namespace EasyBib\\Tests\\Api\\Client\\ApiResource;\n \n+use Doctrine\\Common\\Cache\\ArrayCache;\n use EasyBib\\Api\\Client\\ApiTraverser;\n use EasyBib\\Api\\Client\\ApiResource\\Collection;\n use EasyBib\\Api\\Client\\ApiResource\\ApiResource;\n@@ -185,7 +186,7 @@ private function createFromResponseWithHeaders($headers)\n         $data = $this->dataProvider()[0][0];\n         $response = new Response(200, $headers, json_encode($data));\n \n-        $resourceFactory = new ResourceFactory(new ApiTraverser(new Client()));\n+        $resourceFactory = new ResourceFactory(new ApiTraverser(new Client(), new ArrayCache()));\n         return $resourceFactory->createFromResponse($response);\n     }\n \n@@ -196,7 +197,7 @@ private function createFromResponseWithHeaders($headers)\n     private function getCollection(array $rawData = [])\n     {\n         $data = json_decode(json_encode($rawData));\n-        $resourceFactory = new ResourceFactory(new ApiTraverser(new Client()));\n+        $resourceFactory = new ResourceFactory(new ApiTraverser(new Client(), new ArrayCache()));\n \n         return $resourceFactory->createFromData($data);\n     }\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php\nindex c7e9da5..b7b1bed 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiResource\/ResourceFactoryTest.php\n@@ -2,6 +2,7 @@\n \n namespace EasyBib\\Tests\\Api\\Client\\Resource;\n \n+use Doctrine\\Common\\Cache\\ArrayCache;\n use EasyBib\\Api\\Client\\ApiTraverser;\n use EasyBib\\Api\\Client\\ApiResource\\Collection;\n use EasyBib\\Api\\Client\\ApiResource\\ResourceErrorException;\n@@ -18,7 +19,7 @@ class ResourceFactoryTest extends \\PHPUnit_Framework_TestCase\n     public function setUp()\n     {\n         parent::setUp();\n-        $this->factory = new ResourceFactory(new ApiTraverser(new Client()));\n+        $this->factory = new ResourceFactory(new ApiTraverser(new Client(), new ArrayCache()));\n     }\n \n     public function testFromData()\ndiff --git a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php\nindex 3eec0c8..8cc083c 100644\n--- a\/tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php\n+++ b\/tests\/EasyBib\/Tests\/Api\/Client\/ApiTraverserTest.php\n@@ -81,12 +81,15 @@ public function setUp()\n         ]);\n \n         $this->mockHandler = new MockHandler();\n-        $this->resourceHttpClient = new Client(['base_uri' => $this->dataBaseUrl, 'handler' => HandlerStack::create($this->mockHandler)]);\n+        $this->resourceHttpClient = new Client([\n+            'base_uri' => $this->dataBaseUrl,\n+            'handler' => HandlerStack::create($this->mockHandler),\n+        ]);\n \n         $this->tokenStore = new TokenStore(new Session(new MockArraySessionStorage()));\n         $this->authorization = new AuthorizationResponse(['code' => 'ABC123']);\n \n-        $this->api = new ApiTraverser($this->resourceHttpClient);\n+        $this->api = new ApiTraverser($this->resourceHttpClient, new ArrayCache());\n         $this->apiResponses = new ApiMockResponses($this->mockHandler);\n     }\n \n@@ -548,7 +551,7 @@ public function testGetDoesNotFollowRedirects()\n \n         $this->api->getUser();\n \n-        $this->assertEquals(1, count($this->mockHandler->count()));\n+        $this->assertEquals(1, $this->mockHandler->count());\n     }\n \n     public function testGetWritesToCache()\n"
        return cb(x);
    }

    function collectPatchInfo(cb) {
        getPatchFile(function(data) {
            var out = {};
            var parts = data.split(/From [0-9a-f]{40} /);
            for (var i = 0; i < parts.length; i++) {
                var part = parts[i];
                var message = part.match(/Subject: \[[^\]]+\] (.*)/);
                if (!message || !message[1] || message[1].length < 1) {
                    continue;
                }
                message = message[1];

                var lines = part.split("\n");
                var filename = '';
                var section = '';
                for (var j = 0; j < lines.length; j++) {
                    var line = lines[j];
                    if (line.match(/^\+\+\+/)) {
                        continue;
                    }
                    var m;
                    if (m = line.match(/^--- (.*)$/)) {
                        if (!m[1]) {
                            continue;
                        }
                        // m[1] is something like a/frontend/src/myfile.js
                        filename = m[1].replace(/^a\//, '');
                        continue;
                    }
                    if (line.match(/^@@ /)) {
                        section = line;
                        continue;
                    }
                    if (line[0] === '-' || line[0] === '+') {
                        out[filename + section + line] = {
                            message: message 
                        };
                    }
                }
            }

            cb(out);
        });
    }

    // main

    var documentLines = collectMainDiffLines();
    collectPatchInfo(function(patchInfo) {
        for (var k in patchInfo) {
            var info = patchInfo[k];
            var line = documentLines[k];
            if (!line) {
                continue;
            }
            line.innerHTML += '<aside>' + info.message + '</aside>';
        }
    });
}
